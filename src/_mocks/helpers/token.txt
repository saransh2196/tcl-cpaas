import { Request } from 'express';
import { MockedRequest, RestContext } from 'msw'
import { errorResponse, successResponse } from './api-response'
import jwt from "jsonwebtoken";

const JWT_SECKRET: any = 'cpass_mock_1';
const JWT_EXPIRY: number = 1200;

const RF_JWT_SECKRET: any = 'cpass_mock_2'
const RF_JWT_EXPIRY: number = 1800;

export const createToken = (data: object) => {
    return jwt.sign(data, JWT_SECKRET, { expiresIn: JWT_EXPIRY });
}

// export const validateToken = (res: any, ctx: RestContext, token: any) => {
//     return new Promise((resolve, reject) => {
//         jwt.verify(token, JWT_SECKRET, async (err: any, decoded: any) => {
//             if (err) {
//                 return errorResponse({
//                     res,
//                     ctx,
//                     statusCode: 401,
//                     message: 'UNAUTHORIZED USER',
//                 })
//             }
//             resolve(decoded)
//         });
//     })
// }

// export const createRefreshToken = (res: any, ctx: RestContext, data: object) => {
//     return jwt.sign(data, RF_JWT_SECKRET, { expiresIn: RF_JWT_EXPIRY });
// }

// export const validateRefreshToken = (token: any) => {
//     return new Promise((resolve, reject) => {
//         jwt.verify(token, RF_JWT_SECKRET, (err: any, decoded: any) => {
//             if (err) {
//                 return errorResponse({
//                     res,
//                     ctx,
//                     statusCode: 401,
//                     message: 'UNAUTHORIZED USER',
//                 })
//             }
//             resolve(decoded)
//         });
//     })
// }

// export const extractToken = (req: MockedRequest) => {
//     if (req.headers.authorization && req.headers.authorization.split(' ')[0] === 'Bearer') {
//         return req.headers.authorization.split(' ')[1];
//     } else if (req.query && req.query.token) {
//         return req.query.token;
//     }
//     return null;
// }

// export const extractToken = (req) => {
//   if (req.session && req.session.accessToken) {
//     return req.session.accessToken;
//   } 
//   return null;
// }